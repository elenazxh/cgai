/////////////////////////////////////////////////////
//// CS 8803/4803 CGAI: Computer Graphics in AI Era
//// Assignment 1B: Neural SDF
/////////////////////////////////////////////////////

precision highp float;              //// set default precision of float variables to high precision

varying vec2 vUv;                   //// screen uv coordinates (varying, from vertex shader)
uniform vec2 iResolution;           //// screen resolution (uniform, from CPU)
uniform float iTime;                //// time elapsed (uniform, from CPU)

#define PI 3.1415925359

const vec3 CAM_POS = vec3(0, 1, 0);

vec3 rotate(vec3 p, vec3 ax, float ro)
{
    return mix(dot(p, ax) * ax, p, cos(ro)) + sin(ro) * cross(ax, p);
}

/////////////////////////////////////////////////////
//// sdf functions
/////////////////////////////////////////////////////

float sdfPlane(vec3 p, float h)
{
    return p.y - h;
}

float sdfBunny(vec3 p)
{
    p = rotate(p, vec3(1., 0., 0.), PI / 2.);
    p = rotate(p, vec3(0., 0., 1.), PI / 2. + PI / 1.);

    // sdf is undefined outside the unit sphere, uncomment to witness the abominations
    if(length(p) > 1.0)
    {
        return length(p) - 0.9;
    }

    //// neural network weights for the bunny -- default
    
    /*
    vec4 f0_0=sin(p.y*vec4(1.74,-2.67,1.91,-1.93)+p.z*vec4(2.15,-3.05,.50,-1.32)+p.x*vec4(2.47,.30,-2.00,-2.75)+vec4(1.31,6.89,-8.25,.15));
    vec4 f0_1=sin(p.y*vec4(-.72,-3.13,4.36,-3.50)+p.z*vec4(3.39,3.58,-4.52,-1.10)+p.x*vec4(-1.02,-2.90,2.23,-.62)+vec4(1.61,-.84,-2.00,-.47));
    vec4 f0_2=sin(p.y*vec4(-1.47,.32,-.70,-1.51)+p.z*vec4(.17,.75,3.59,4.05)+p.x*vec4(-3.10,1.40,4.72,2.90)+vec4(-6.76,-6.43,2.41,-.66));
    vec4 f0_3=sin(p.y*vec4(-2.75,1.59,3.43,-3.39)+p.z*vec4(4.09,4.09,-2.34,1.23)+p.x*vec4(1.07,.65,-.18,-3.46)+vec4(-5.09,.73,3.06,3.35));
    vec4 f1_0=sin(mat4(.47,.12,-.23,-.04,.48,.06,-.24,.19,.12,.72,-.08,.39,.37,-.14,-.01,.06)*f0_0+
        mat4(-.62,-.40,-.81,-.30,-.34,.08,.26,.37,-.16,.38,-.09,.36,.02,-.50,.34,-.38)*f0_1+
        mat4(-.26,-.51,-.32,.32,-.67,.35,-.43,.93,.12,.34,.07,-.01,.67,.27,.43,-.02)*f0_2+
        mat4(.02,-.18,-.15,-.10,.47,-.07,.82,-.46,.18,.44,.39,-.94,-.20,-.28,-.20,.29)*f0_3+
        vec4(-.09,-3.49,2.17,-1.45))/1.0+f0_0;
    vec4 f1_1=sin(mat4(-.46,-.33,-.85,-.57,.41,.87,.25,.58,-.47,.16,-.14,-.06,-.70,-.82,-.20,.47)*f0_0+
        mat4(-.15,-.73,-.46,-.58,-.54,-.34,-.02,.12,.55,.32,.22,-.87,-.57,-.28,-.51,.10)*f0_1+
        mat4(.75,1.06,-.08,-.17,-.43,.69,1.07,.23,.46,-.02,.10,-.11,.21,-.70,-.08,-.48)*f0_2+
        mat4(.04,-.09,-.51,-.06,1.12,-.21,-.35,-.17,-.95,.49,.22,.99,.62,-.25,.06,-.20)*f0_3+
        vec4(-.61,2.91,-.17,.71))/1.0+f0_1;
    vec4 f1_2=sin(mat4(.01,-.86,-.07,.46,.73,-.28,.83,.12,.16,.33,.28,-.55,-.21,-.02,.53,-.15)*f0_0+
        mat4(-.28,-.32,.19,-.28,.24,-.23,-.61,-.39,.26,.40,.18,.41,.21,.57,-.91,-.29)*f0_1+
        mat4(.23,-.40,-1.34,-.50,.08,-.04,-1.67,-.16,-.65,-.09,.38,-.22,-.14,-.34,.37,.05)*f0_2+
        mat4(-.47,-.23,-.57,-.05,.51,.04,.00,.27,.80,.29,-.09,-.53,-.20,-.41,-.64,-.12)*f0_3+
        vec4(1.08,4.00,-2.54,2.18))/1.0+f0_2;
    vec4 f1_3=sin(mat4(-.30,.38,.39,.53,.73,.73,-.06,.01,.54,-.07,-.19,.68,.59,.40,.04,.07)*f0_0+
        mat4(-.17,.44,-.61,.43,-.84,-.12,.65,-.50,.33,-.31,-.28,.13,.18,-.42,.14,.08)*f0_1+
        mat4(-.78,.06,-.18,.37,-.99,.49,.71,.15,.27,-.48,-.17,.25,.05,.10,-.40,-.21)*f0_2+
        mat4(-.17,-.27,.40,.18,-.24,.23,.03,-.83,-.30,-.38,.07,.21,-.45,-.24,.78,.50)*f0_3+
        vec4(2.14,-3.48,3.81,-1.43))/1.0+f0_3;
    vec4 f2_0=sin(mat4(.83,.15,-.49,-.80,-.83,.16,1.24,.75,-.27,.18,-.13,1.05,.70,-.15,.30,.79)*f1_0+
        mat4(-.38,-.17,.34,.67,-.39,.09,.48,-.93,.19,.60,-.20,-.22,-.76,-.62,-.40,.01)*f1_1+
        mat4(.10,.22,.08,.13,-.42,-.11,.71,-.63,.02,.46,-.07,-.46,-.37,.07,.15,.14)*f1_2+
        mat4(.09,-.48,-.38,.40,-.57,-.88,-.14,-.25,.20,.95,.86,-1.08,.46,.04,.53,-.82)*f1_3+
        vec4(3.47,-3.66,3.06,.84))/1.4+f1_0;
    vec4 f2_1=sin(mat4(1.03,.03,-.76,-.03,.84,.66,-.49,.74,-.09,-.85,-.55,.17,.07,.85,-.55,-.20)*f1_0+
        mat4(-.55,1.13,.41,-.21,-.55,.19,.49,.67,.40,1.80,-.82,-.83,-1.02,.78,-.42,-.51)*f1_1+
        mat4(.77,-.88,.64,1.10,-.49,1.05,-.43,-.38,.66,-.63,.02,.11,-.24,-.23,.49,-.65)*f1_2+
        mat4(-.66,1.90,.02,-.48,.22,-.62,-.68,-.44,.52,-.57,.16,-.61,-.03,-.02,-.88,-.23)*f1_3+
        vec4(.58,-3.00,-2.53,.14))/1.4+f1_1;
    vec4 f2_2=sin(mat4(-.44,-.06,.30,-.37,.27,-.23,-.56,.15,.03,-.14,-.08,.72,.76,-.58,.55,.29)*f1_0+
        mat4(.31,.23,.42,-.17,.37,-.05,.39,.46,-1.14,.32,.06,-.28,.28,-.21,-.58,.62)*f1_1+
        mat4(.92,-.16,.86,-.09,-.12,.33,-.49,-.24,.29,-.19,.95,-.40,-.87,.08,.08,-.71)*f1_2+
        mat4(-.45,.67,1.07,-.14,-.56,.06,-.81,-.15,-.57,-.24,-1.09,.69,-.44,-.32,-.00,-.07)*f1_3+
        vec4(-4.43,-1.86,-2.87,1.45))/1.4+f1_2;
    vec4 f2_3=sin(mat4(.58,.25,.01,-.54,.34,.56,.61,-.79,-.01,.05,-.57,-1.31,.74,.78,-.10,-.11)*f1_0+
        mat4(-.03,-.48,-.24,.01,.10,.23,.22,-.05,.76,.29,-.37,.02,.54,-.07,.27,.38)*f1_1+
        mat4(.31,-1.03,.24,.95,.80,.29,.43,.61,-.04,-.22,-.06,-.52,-.46,.35,.07,-.07)*f1_2+
        mat4(.47,-.12,-.62,.06,.47,-.41,.53,-2.14,-.59,.16,.74,-.58,.32,.66,-.30,-.18)*f1_3+
        vec4(-2.86,-3.27,-.55,2.87))/1.4+f1_3;
    return dot(f2_0,vec4(-.08,.03,.07,-.03))+
        dot(f2_1,vec4(-.03,-.02,-.06,-.07))+
        dot(f2_2,vec4(.05,-.09,.03,.11))+
        dot(f2_3,vec4(.03,.06,-.06,-.03))+
        -0.014;
    */

    vec4 f0_0=sin(p.y*vec4(-1.39,4.41,-2.70,3.58)+p.z*vec4(-3.00,-2.04,-1.52,-.24)+p.x*vec4(-.90,3.80,-3.47,1.45)+vec4(-2.21,-6.43,5.41,-2.10));
vec4 f0_1=sin(p.y*vec4(.23,1.80,-1.88,-.37)+p.z*vec4(1.67,-.98,2.36,2.19)+p.x*vec4(2.07,.69,-1.30,-2.26)+vec4(-5.24,1.14,7.09,5.42));
vec4 f0_2=sin(p.y*vec4(-2.05,1.39,-2.04,1.99)+p.z*vec4(-.13,-4.84,-.91,-2.58)+p.x*vec4(2.64,-3.73,-.94,-.52)+vec4(-4.32,-6.04,1.04,.47));
vec4 f0_3=sin(p.y*vec4(-2.20,.27,-3.98,1.69)+p.z*vec4(1.59,-.75,-1.93,4.02)+p.x*vec4(-1.10,-3.32,-.06,1.00)+vec4(-3.29,-1.12,-6.91,6.44));
vec4 f1_0=sin(mat4(.58,-.11,.51,.67,-.49,-.15,-.45,.22,.36,.23,-.38,-.62,-.05,-.16,.39,.18)*f0_0+
    mat4(-.32,.32,.48,.60,-.48,-.16,.01,-.05,-.41,.03,.11,.33,-.72,-.28,-.58,-.57)*f0_1+
    mat4(.54,.69,-.16,.72,.47,.25,.29,-.26,.30,.36,-.05,.02,.21,.20,-.48,-.18)*f0_2+
    mat4(-.04,-.69,.01,.15,-.51,-.11,.15,.39,.39,-.44,-.50,-.68,.20,.03,.45,.53)*f0_3+
    vec4(-.24,-3.54,2.40,-2.15))/1.0+f0_0;
vec4 f1_1=sin(mat4(-.69,-.04,-.33,-.74,-.06,-.18,-.71,-.57,-.54,.19,.20,-.13,-.16,-.20,.34,-.29)*f0_0+
    mat4(.28,.71,-.12,.36,-.50,.41,.20,-.73,-.68,.41,.27,.49,.43,-.22,-.47,-.21)*f0_1+
    mat4(.34,-.21,-.38,.13,.12,-.26,.21,.17,.43,.29,.42,-.34,.01,.26,.22,-.31)*f0_2+
    mat4(-.04,-.24,.34,-.57,.08,.26,.38,.39,.30,.29,-.42,.15,-.20,-.86,-.39,-.38)*f0_3+
    vec4(-2.83,2.01,1.31,-4.29))/1.0+f0_1;
vec4 f1_2=sin(mat4(-.29,.33,-.01,.25,-.40,-.02,.45,.22,-.00,.17,.74,.08,.20,.02,.93,-.06)*f0_0+
    mat4(-.20,-.50,-.35,.57,-.82,.31,.49,-.38,.40,-.40,-.19,-.18,-.04,.20,-.19,-.66)*f0_1+
    mat4(-.89,-.76,-.75,.31,.57,-.44,.27,-.23,.08,-.90,.55,-.40,-.60,-.18,1.06,.89)*f0_2+
    mat4(-.07,-.17,.33,.33,-.36,.43,-.09,.26,.25,.31,.32,.57,-.14,-.32,.03,-.27)*f0_3+
    vec4(2.44,-.03,.50,.96))/1.0+f0_2;
vec4 f1_3=sin(mat4(.08,.25,-.37,-.06,.09,-.05,.22,-.14,.30,.01,.04,-.36,-.10,.68,1.20,.03)*f0_0+
    mat4(-.41,.12,.18,.01,-.30,.11,.23,.92,-.09,.22,.44,.64,.22,.30,.42,-.54)*f0_1+
    mat4(.05,-.31,-.11,.20,-.22,-.11,.16,.10,-.74,.01,.66,.09,-.12,.12,.67,.60)*f0_2+
    mat4(-.47,.28,.37,.52,.40,.57,.73,.46,.44,-.18,-.47,.25,.12,-.15,-.18,-.14)*f0_3+
    vec4(-2.07,.83,3.18,2.84))/1.0+f0_3;
vec4 f2_0=sin(mat4(-.64,.45,-.51,-.47,-.32,.33,.08,-.46,.08,-.22,-.57,.16,-.53,-.18,.01,.16)*f1_0+
    mat4(.24,-.27,.44,.19,-.15,-.32,-.20,.91,-.79,-.23,-.57,-.30,.42,-.34,-.86,.08)*f1_1+
    mat4(-.05,.51,.33,-.66,.28,-.23,.75,.45,-.24,.29,.30,-.66,.18,.43,.77,-.44)*f1_2+
    mat4(.11,.20,-.14,.83,.48,-.38,-.35,-.61,.32,-.35,-.89,.48,.51,.53,-.69,.04)*f1_3+
    vec4(1.26,-2.04,.80,2.69))/1.4+f1_0;
vec4 f2_1=sin(mat4(.03,.29,-.56,-.29,-.18,-.22,-.01,-.12,.64,.38,.61,-.15,-.60,.39,.31,.51)*f1_0+
    mat4(-.07,.32,.12,.31,.57,.60,.24,-.41,.54,-.53,-.40,.11,-.55,-.18,.26,.13)*f1_1+
    mat4(.09,.85,.20,-.55,.59,.50,-.41,.12,-.13,.73,-.23,-.45,.30,.25,.52,-.35)*f1_2+
    mat4(-.32,-.34,-.33,.29,-.60,-.54,-.64,.07,-.40,.54,-.44,.16,-.10,-.09,-.71,-.06)*f1_3+
    vec4(.75,2.00,-2.03,1.41))/1.4+f1_1;
vec4 f2_2=sin(mat4(.29,-.16,.36,.10,.67,-.01,.29,-.50,.63,-.14,-.03,-.79,.02,-.16,.22,-.03)*f1_0+
    mat4(.43,-.27,.46,-1.49,-.27,-.09,-.49,.15,.63,.73,-.35,-.45,.13,.18,-.28,.56)*f1_1+
    mat4(-.38,-.13,.82,-.60,.55,-.01,.97,-.04,-.72,-.02,-.15,.53,-.14,.22,-.12,-.04)*f1_2+
    mat4(.62,-.58,.58,-.03,-.41,.26,1.03,.18,.22,-1.00,-.47,.24,-.66,-.00,.15,.61)*f1_3+
    vec4(3.06,-1.70,-2.31,3.58))/1.4+f1_2;
vec4 f2_3=sin(mat4(.18,-.52,-.26,.46,.18,-.49,.02,.95,-.11,.13,.10,-.39,-.16,.02,-.00,.12)*f1_0+
    mat4(-.25,-.12,-.51,.04,.24,-.80,.94,.26,-.22,.06,-.21,-.20,.15,-.44,-.16,.03)*f1_1+
    mat4(.23,.04,-.49,-.68,-.27,-.04,.06,-.23,-.66,-.33,-.32,-.02,.42,-.54,.42,-.22)*f1_2+
    mat4(-.40,-.02,.35,-.04,.26,-.60,-.48,.06,1.10,.42,-.19,.23,-.36,.05,-.50,-.37)*f1_3+
    vec4(-3.69,-.54,-1.96,-2.53))/1.4+f1_3;
vec4 f3_0=sin(mat4(-.13,-.39,-.85,1.04,-.81,-.38,-.74,-.88,.68,-.54,1.07,.13,-.54,.03,.45,.48)*f2_0+
    mat4(.28,.25,-.08,-.19,.62,-.55,.49,.19,.47,-.23,.48,.79,-.01,.94,-.84,.18)*f2_1+
    mat4(.42,.51,.26,-.37,.25,.51,.34,.69,.44,.07,-1.28,.18,.64,.12,-.13,-.58)*f2_2+
    mat4(-.24,-.58,-.41,.71,-.09,.06,-.03,.19,-.13,-.02,-.13,-.63,-.82,-.37,.20,.15)*f2_3+
    vec4(-.02,.11,2.76,-.18))/1.7+f2_0;
vec4 f3_1=sin(mat4(.65,.14,-.39,.36,-.73,.05,.50,.90,.46,.56,.64,-.17,.29,-.32,-.40,.59)*f2_0+
    mat4(-.20,-.56,-.11,.70,.52,-.50,.51,.30,-.21,.01,-.38,.33,-.46,-.19,.63,-.04)*f2_1+
    mat4(-.30,.09,-.35,.05,.54,.17,-.27,-.30,.10,-.40,.58,.83,.46,-.55,.11,-.04)*f2_2+
    mat4(.30,-.33,-.11,.24,.27,.44,.16,-.32,.10,.32,.38,-1.16,-.83,.24,.64,.20)*f2_3+
    vec4(1.61,1.68,2.49,-1.69))/1.7+f2_1;
vec4 f3_2=sin(mat4(-.29,1.44,.75,-.66,.29,.58,.28,.76,-.64,.08,-.63,-.55,-1.54,-.27,-.64,.95)*f2_0+
    mat4(.60,-.47,.45,1.56,-.26,.60,-1.67,-.15,-.34,-.30,.22,.05,.16,.05,-.30,-.88)*f2_1+
    mat4(.33,.09,-.13,-.72,-.84,.82,.10,.39,.37,.36,.18,-.16,-.22,.79,-.85,.20)*f2_2+
    mat4(-.23,.21,1.05,.66,-.22,.59,-.53,-.98,-.48,-.13,-.87,-.21,-.37,-.42,-.80,.49)*f2_3+
    vec4(2.29,1.42,-1.03,.74))/1.7+f2_2;
vec4 f3_3=sin(mat4(.66,.07,.58,-.32,-.66,-.20,.39,-.18,.30,-.30,-.35,-.22,-.33,.68,-.33,-.54)*f2_0+
    mat4(-.16,.57,.63,-.75,.78,-.07,.20,.01,.48,.02,-.04,-.96,.43,.09,-.54,.55)*f2_1+
    mat4(.55,.20,.52,-.94,-.13,.65,.46,-.42,.41,-.77,.48,-.28,.78,.44,-.20,.15)*f2_2+
    mat4(-.64,.13,-.09,-.32,.40,-.35,.44,.79,.26,.19,.04,-.77,-.18,-.20,.16,-.20)*f2_3+
    vec4(1.10,3.56,3.16,2.69))/1.7+f2_3;
return dot(f3_0,vec4(.04,.05,-.00,.02))+
    dot(f3_1,vec4(.04,.02,-.01,.05))+
    dot(f3_2,vec4(.03,.03,-.02,-.01))+
    dot(f3_3,vec4(-.05,.05,-.04,-.04))+
    0.172;
}

/////////////////////////////////////////////////////
//// Step 1: training a neural SDF model
//// You are asked to train your own neural SDF model on Colab. 
//// Your implementation should take place in neural_sdf.ipynb.
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
//// Step 2: copy neural SDF weights to GLSL
//// In this step, you are asked to the network weights you have trained from the text file to the function sdfCow().
//// You should replace the default implementation (a sphere) with your own network weights. 
/////////////////////////////////////////////////////

float sdfCow(vec3 p)
{
    p = rotate(p, vec3(1., 0., 0.), PI / 2.);
    p = rotate(p, vec3(0., 0., 1.), PI / 3. + PI/3.0);

    // sdf is undefined outside the unit sphere, uncomment to witness the abominations
    if(length(p) > 1.)
    {
        return length(p) - 0.9;
    }

    //// your implementation starts
    vec4 f0_0=sin(p.y*vec4(-.52,2.35,-.19,3.30)+p.z*vec4(-3.76,3.30,2.57,-.76)+p.x*vec4(.46,1.55,.89,-3.13)+vec4(4.17,7.69,-.32,-2.17));
vec4 f0_1=sin(p.y*vec4(-2.90,2.35,-2.80,3.72)+p.z*vec4(.93,3.67,-3.41,.78)+p.x*vec4(-2.38,1.91,-.53,-4.50)+vec4(7.87,-2.33,-8.78,6.76));
vec4 f0_2=sin(p.y*vec4(-1.17,.56,2.66,-3.97)+p.z*vec4(.21,3.04,-4.34,-2.30)+p.x*vec4(-.74,-1.63,2.55,-2.65)+vec4(-1.60,2.79,2.26,6.60));
vec4 f0_3=sin(p.y*vec4(-.19,2.97,-3.22,-1.78)+p.z*vec4(2.09,-1.55,-1.17,-.68)+p.x*vec4(2.20,-.93,-.32,3.54)+vec4(-7.61,-4.94,5.05,8.56));
vec4 f1_0=sin(mat4(.36,-.02,.30,-.75,-.67,-.08,.60,-.05,.06,-.27,-.52,-.49,-.04,-.55,.15,-.24)*f0_0+
    mat4(-.34,-.15,.10,-.39,-.36,.30,-.12,.17,-.14,-.35,-.27,-.05,-.08,-.03,-.34,.33)*f0_1+
    mat4(.06,.17,-.00,-.91,.53,-.32,-.89,-.03,-.05,.39,-.64,-.22,-.11,-.10,.07,-.07)*f0_2+
    mat4(.74,-.29,-.62,-.26,-.60,-.52,.30,-.16,.12,.44,.08,-.06,.19,-.47,-.45,-.01)*f0_3+
    vec4(1.38,-2.51,-3.87,-.52))/1.0+f0_0;
vec4 f1_1=sin(mat4(-.16,.48,-.18,-.17,-.25,-.39,.01,-.06,-.21,-.12,-.78,.01,-.16,-.57,-.22,.05)*f0_0+
    mat4(.34,-.13,.76,1.09,-.08,.34,-.18,-.55,.04,-1.02,-.09,.45,.53,-.31,-.39,.94)*f0_1+
    mat4(-.06,-.81,.89,-.19,.12,.36,-.10,-.05,-.27,-.00,.00,.19,.00,.01,-.33,-.11)*f0_2+
    mat4(.72,.02,.51,.18,.62,.10,.49,-.17,.28,.07,.61,.45,-.10,-.50,-.05,.26)*f0_3+
    vec4(.32,-2.85,2.43,3.05))/1.0+f0_1;
vec4 f1_2=sin(mat4(.17,-.10,-.06,-.32,.58,-.73,.11,-.34,-1.09,.71,-.25,.25,.43,-.27,-.08,.37)*f0_0+
    mat4(.26,-.09,-.32,-.01,-.32,-.26,.01,-.28,.62,-.14,-.20,-.68,-.17,-.51,.29,.06)*f0_1+
    mat4(.45,-1.61,-.52,.49,-.69,.26,.05,-.29,.35,.04,-.76,.68,-.62,.02,-.03,.65)*f0_2+
    mat4(-.21,-.82,-.05,.02,.21,-.03,-.10,-.10,-.02,.01,-.35,.13,-.10,.67,.49,-.21)*f0_3+
    vec4(2.27,4.30,-1.17,-2.80))/1.0+f0_2;
vec4 f1_3=sin(mat4(.54,.43,.16,.15,.24,-.33,.11,.54,-.05,.25,.06,.21,-.04,-.52,.63,-.66)*f0_0+
    mat4(.63,-.08,-1.12,.70,-.03,-.24,.19,.48,.49,.46,.20,.21,.30,.34,.33,-.56)*f0_1+
    mat4(.60,.50,.32,.72,-.22,.26,-.37,.10,.17,.23,.01,-.03,.43,.60,.24,-.30)*f0_2+
    mat4(-.47,.58,-.34,.29,-.03,-.73,-.91,.50,.59,-.73,-.54,-.12,.87,.21,.00,.38)*f0_3+
    vec4(3.08,-1.97,-2.02,2.86))/1.0+f0_3;
vec4 f2_0=sin(mat4(.85,1.02,.07,-.12,.67,.23,-.41,-.32,.42,.33,-.12,.39,.54,.77,.57,-.01)*f1_0+
    mat4(.19,-.06,.35,-.04,.58,-1.03,-.78,-.50,-.96,.35,-.74,-.38,-.43,-.04,-.51,-.44)*f1_1+
    mat4(.29,.12,.20,.21,.35,.40,.06,.75,.30,-.02,-.12,-.24,-.08,-.01,-.21,-.81)*f1_2+
    mat4(.27,-.23,-.70,-.30,-.06,.76,.01,.07,.39,-.49,-.09,.91,.57,.55,.62,-.52)*f1_3+
    vec4(2.72,-1.18,1.33,-3.81))/1.4+f1_0;
vec4 f2_1=sin(mat4(-.36,.39,-1.01,-.25,.52,-.45,-.34,-.56,-.43,.04,-.08,.04,-.13,-.30,-.34,-1.96)*f1_0+
    mat4(.47,-.28,.01,-.40,.28,-.79,.14,.73,.22,.58,.15,.58,.27,-.43,-.79,.14)*f1_1+
    mat4(-.06,-.90,-.60,-.60,.36,.88,-.35,-.17,.17,-.49,-.25,.10,-.41,.22,-.23,.36)*f1_2+
    mat4(-.35,-.49,-.43,-.27,-.19,-.39,.15,.74,-.46,-1.13,-.46,.96,-1.03,-.12,.16,.81)*f1_3+
    vec4(-1.32,-2.56,1.17,.27))/1.4+f1_1;
vec4 f2_2=sin(mat4(-.34,-.22,.50,.42,-.62,-.21,.04,-.05,.40,.26,.50,.58,.63,-.12,.46,.19)*f1_0+
    mat4(.80,.07,.43,.49,.69,.48,-.68,.33,-.85,-.96,-.13,.28,-.04,.65,-.27,.64)*f1_1+
    mat4(-.10,-.61,.02,.13,-.33,-.50,.76,.90,.24,-.23,-.13,-1.06,-.09,.85,-.13,.16)*f1_2+
    mat4(.10,-.49,-.38,.14,-.49,.42,-.31,.92,.04,.13,-.16,.25,.46,-.28,-.30,.49)*f1_3+
    vec4(-2.36,-.25,-1.71,-.95))/1.4+f1_2;
vec4 f2_3=sin(mat4(-.00,-.83,.43,-.69,-.38,-.91,-.28,.36,-.11,-.48,.57,.36,-.19,1.04,-.41,-.36)*f1_0+
    mat4(-.01,-.81,-.28,-.96,-.52,.02,.26,1.18,.13,-.61,.18,-.64,.21,.03,.15,-.24)*f1_1+
    mat4(-.16,-.51,-.51,-.16,1.34,-.72,1.30,-.54,.11,.39,-.16,.35,.35,.37,-.74,.33)*f1_2+
    mat4(.17,.54,.05,.73,.82,-.25,.46,-.19,-.36,.79,-1.07,.20,.10,.70,-.48,.10)*f1_3+
    vec4(-3.25,-.55,1.81,-3.63))/1.4+f1_3;
return dot(f2_0,vec4(.07,-.07,.06,.04))+
    dot(f2_1,vec4(-.03,-.05,.04,-.02))+
    dot(f2_2,vec4(-.06,-.06,-.09,-.04))+
    dot(f2_3,vec4(.04,-.02,.03,.07))+
    -0.079;
    //// your implementation ends
}

float sdfTeddy(vec3 p)
{
    p = rotate(p, vec3(1., 0., 0.), PI / 2.);
    p = rotate(p, vec3(0., 0., 1.), PI / 2. + PI / 1.);

    // sdf is undefined outside the unit sphere, uncomment to witness the abominations
    if(length(p) > 1.0)
    {
        return length(p) - 0.9;
    }
    
    vec4 f0_0=sin(p.y*vec4(-3.94,-1.61,2.07,.52)+p.z*vec4(-1.70,2.83,1.82,1.62)+p.x*vec4(1.04,-.02,-1.43,-2.39)+vec4(6.05,3.81,1.94,-2.89));
vec4 f0_1=sin(p.y*vec4(4.01,2.47,.14,-.86)+p.z*vec4(3.31,-2.50,-3.57,-.73)+p.x*vec4(-.90,1.21,-1.21,-3.05)+vec4(-.18,-5.08,4.30,8.25));
vec4 f0_2=sin(p.y*vec4(3.47,-2.24,3.69,-2.33)+p.z*vec4(-3.62,2.19,-3.36,2.23)+p.x*vec4(3.93,1.74,-1.88,1.86)+vec4(5.73,6.05,-7.03,6.96));
vec4 f0_3=sin(p.y*vec4(1.65,-3.47,-.75,-2.97)+p.z*vec4(-1.02,.95,-3.46,.19)+p.x*vec4(3.20,-4.83,-1.40,2.88)+vec4(-4.56,.30,-6.83,-5.15));
vec4 f1_0=sin(mat4(.10,-.29,.02,.36,.05,-.46,.08,.58,-.08,.97,-.28,-.44,.49,.14,.17,-.00)*f0_0+
    mat4(-.08,.15,.00,.35,-.17,-.23,.44,-.04,.32,-.21,-.02,-.33,.45,-.17,-.55,-.52)*f0_1+
    mat4(.59,-.50,-.02,-.20,.32,.78,-.12,-.53,.25,.37,.01,-.46,.57,.11,.05,-.37)*f0_2+
    mat4(.34,-.03,-.09,.04,-.06,-.56,-.15,-.53,-.45,-.16,-.05,-.34,-.22,-.41,.16,-.71)*f0_3+
    vec4(-3.44,2.07,-2.11,3.59))/1.0+f0_0;
vec4 f1_1=sin(mat4(-.21,-.52,.30,.38,.62,-.14,-.15,-.19,1.44,-.83,-.05,.25,-.25,-.37,.09,-.52)*f0_0+
    mat4(.15,.03,.40,.25,.72,-.17,.14,.63,-.29,.03,-.51,-.51,.20,-.35,.36,.64)*f0_1+
    mat4(.25,.23,.31,.16,-.45,.19,-.66,.62,.22,-.03,-.40,.09,-.26,-.31,.17,.20)*f0_2+
    mat4(.86,-.30,-.04,-.84,.35,.27,.56,.28,-.44,-.36,.31,-.84,.48,-.15,.00,-.26)*f0_3+
    vec4(-2.29,-3.37,2.09,1.55))/1.0+f0_1;
vec4 f1_2=sin(mat4(-.53,.17,.16,.56,.02,-.14,-.43,-.00,-.47,-.09,-.57,.08,-.30,.11,-.24,.10)*f0_0+
    mat4(-.19,.07,-.39,.94,-.15,-.26,-.79,-.37,-.39,.19,-.56,-.48,.43,.51,-.57,.30)*f0_1+
    mat4(.19,.21,.00,.06,-.32,.17,-.42,-.07,.52,.25,.34,.53,.15,.40,.20,.28)*f0_2+
    mat4(-.28,.73,-.30,-.22,.78,.40,.26,.37,.93,.29,.45,-.03,-.26,-.37,1.01,-.63)*f0_3+
    vec4(2.86,-2.83,.76,-1.33))/1.0+f0_2;
vec4 f1_3=sin(mat4(-.18,-.11,-.36,-.11,.05,-.51,.92,.00,-.07,.38,.57,.30,-.91,.83,.31,.70)*f0_0+
    mat4(-.51,-.10,-.64,-.49,-.71,-.65,-.52,-.04,.88,-.45,-.09,.19,-.57,-.44,.43,-.45)*f0_1+
    mat4(-.93,.11,-.00,.18,-.14,.24,-.38,.07,-.13,-.43,.08,.02,.09,-.37,1.21,-.51)*f0_2+
    mat4(.20,.46,-.21,.63,-.19,.45,.06,-.05,-.09,.45,-1.01,.51,.29,-.55,.23,.51)*f0_3+
    vec4(-3.04,-1.43,1.21,-2.18))/1.0+f0_3;
vec4 f2_0=sin(mat4(-.14,-.68,-.12,.56,-.44,-.86,.38,1.34,.95,-.15,-.31,.24,-.25,-.19,-.17,.23)*f1_0+
    mat4(.81,-.35,.15,.56,.41,-.51,.23,.53,.52,-.00,-.46,-.71,.47,-.32,-.68,-.01)*f1_1+
    mat4(-.23,.21,.14,.37,.65,-.68,.34,.17,.31,-.42,.09,.49,-.34,.22,-.19,.27)*f1_2+
    mat4(.42,-.30,-.13,-.73,-.62,-.23,.12,.40,.39,-.78,.09,-.34,-.25,.13,-1.03,.46)*f1_3+
    vec4(-4.15,-.40,-2.31,3.76))/1.4+f1_0;
vec4 f2_1=sin(mat4(.30,.61,.89,.30,.23,.56,-.28,.52,-.11,-.45,-.46,-.75,1.27,1.00,-.70,.26)*f1_0+
    mat4(-.34,.05,.50,.37,-.32,-.42,-.49,-.26,-.28,.42,-.76,-.09,.26,-.42,.02,-.05)*f1_1+
    mat4(.20,-.23,.38,.05,-.01,-.31,-.81,-.02,.12,-.39,-.67,-.34,-.36,-.46,.24,-.58)*f1_2+
    mat4(.76,-.30,-.42,.10,.55,.11,.57,-.71,-.27,-.31,-.16,.05,.05,-.35,1.14,-.74)*f1_3+
    vec4(1.27,3.39,-1.90,1.28))/1.4+f1_1;
vec4 f2_2=sin(mat4(-.02,-.42,.44,-.84,.37,-.11,.23,-.47,.85,-.01,.32,-.19,1.13,-.43,-.05,.62)*f1_0+
    mat4(.21,-.34,-.05,-.69,.31,.37,-.91,.13,-.31,.07,.20,-.84,.29,.54,-.58,-.75)*f1_1+
    mat4(-.62,.45,.48,-.33,.06,-.60,-.05,.68,-.04,.70,1.05,.13,-.51,-.41,.04,-.51)*f1_2+
    mat4(.91,.06,-.38,.37,-.33,.25,.32,-.15,.69,.33,-.42,.35,-.06,.92,.12,.26)*f1_3+
    vec4(-2.83,2.78,3.45,3.68))/1.4+f1_2;
vec4 f2_3=sin(mat4(.06,-.23,.83,-.70,.26,-.48,.49,-.99,.26,.26,.42,.47,-.64,-.14,.05,-.25)*f1_0+
    mat4(-.33,.32,.25,-.07,.17,-.38,-.96,.17,-.12,-.21,-.06,.47,.24,-.87,-.37,-.43)*f1_1+
    mat4(-.18,-.68,-.75,-.49,.59,.17,-.52,-.61,-.27,-.19,-.42,-.52,-.87,.69,-.54,-.88)*f1_2+
    mat4(-.16,1.41,.24,-.57,-.12,-.92,-.70,-.33,-.03,.56,-.26,-.63,.44,-.60,-.50,.27)*f1_3+
    vec4(-1.08,-1.48,-3.42,4.00))/1.4+f1_3;
return dot(f2_0,vec4(.05,-.06,-.10,-.03))+
    dot(f2_1,vec4(.03,-.07,.03,.04))+
    dot(f2_2,vec4(.03,.06,-.01,-.05))+
    dot(f2_3,vec4(-.02,.03,-.04,-.06))+
    0.125;
}

float sdfDucky(vec3 p)
{
    p = rotate(p, vec3(1., 0., 0.), PI / 2.);
    p = rotate(p, vec3(0., 0., 1.), -PI / 2.);

    // sdf is undefined outside the unit sphere, uncomment to witness the abominations
    if(length(p) > 1.)
    {
        return length(p) - 0.9;
    }

    //// your implementation starts
    vec4 f0_0=sin(p.y*vec4(3.62,2.87,-3.98,2.63)+p.z*vec4(-3.03,1.62,3.35,-2.59)+p.x*vec4(.12,-1.93,2.57,.22)+vec4(7.02,-3.99,-.13,7.97));
    vec4 f0_1=sin(p.y*vec4(4.01,-3.52,-3.91,-.02)+p.z*vec4(-.54,-1.88,.42,.84)+p.x*vec4(-1.94,-2.86,2.06,-1.07)+vec4(-6.28,-1.29,-7.04,2.99));
    vec4 f0_2=sin(p.y*vec4(-4.15,3.21,3.79,4.19)+p.z*vec4(-3.79,2.94,-1.66,.48)+p.x*vec4(-3.30,-3.39,-.12,2.12)+vec4(7.86,-7.12,2.73,5.17));
    vec4 f0_3=sin(p.y*vec4(-2.31,2.51,.19,1.75)+p.z*vec4(3.02,-1.51,-3.36,2.78)+p.x*vec4(-.25,2.46,-3.42,-2.18)+vec4(2.49,-6.50,-7.01,-7.03));
    vec4 f1_0=sin(mat4(-.21,-.28,-.52,.19,.20,.40,.09,.13,-.02,-.21,-.13,.06,-.29,.09,.19,.06)*f0_0+
        mat4(-.25,.12,-.41,.55,.21,1.18,-.07,.25,-.43,.59,.26,.42,-.63,.64,.07,-.07)*f0_1+
        mat4(.29,.31,-.15,-.06,-.02,-.27,.34,.13,-.40,-.65,-.57,-.51,-.65,-.70,.34,.15)*f0_2+
        mat4(-.88,.56,.20,-.13,.37,.23,-.14,.17,-.53,.30,-.08,-.54,-.30,.64,.20,-.26)*f0_3+
        vec4(1.76,1.85,-1.60,2.74))/1.0+f0_0;
    vec4 f1_1=sin(mat4(.02,-.44,-.25,-.28,.17,.57,-.47,.09,.28,.04,-.02,-.16,.70,.43,.03,.64)*f0_0+
        mat4(.25,-.24,.41,.11,.55,.05,-.19,.57,.01,.07,-.18,-.24,.11,-.30,-.24,-.63)*f0_1+
        mat4(.16,.03,-.03,.02,.14,-.00,-.13,-.17,.50,-.51,-.06,.12,-.69,.17,.05,.24)*f0_2+
        mat4(-.08,-.45,.49,.07,.19,-.19,-.18,-.20,.03,.52,.39,-.53,.10,-.04,.25,.40)*f0_3+
        vec4(.52,-2.91,-1.00,-3.58))/1.0+f0_1;
    vec4 f1_2=sin(mat4(-.13,.31,-.07,.16,-.57,-.47,.04,-.43,-.10,.10,-.02,.22,-.08,-.38,.15,.05)*f0_0+
        mat4(-.06,.41,-.07,.40,-.23,.44,.32,.23,-.47,.34,-.34,-.08,-.57,.47,.22,.03)*f0_1+
        mat4(.05,.10,-.15,-.04,-.22,.01,.41,-.11,.46,-.36,.41,-.27,.39,.46,.38,.19)*f0_2+
        mat4(.26,-.36,.31,.40,.29,.03,-.20,-.04,.17,-.15,.14,.59,.17,-.41,-.41,.32)*f0_3+
        vec4(.77,-2.41,.30,-2.08))/1.0+f0_2;
    vec4 f1_3=sin(mat4(.38,.26,-.58,.17,-.21,.34,-.60,.14,-.04,-.18,.26,-.35,.39,.74,-.26,-.61)*f0_0+
        mat4(-.50,-.05,.09,-.64,.36,-.09,.06,-.22,-.22,-.30,.34,-.57,-.23,.29,.40,.14)*f0_1+
        mat4(.11,-.21,-.20,.25,-.09,.23,-.09,-.11,.11,.47,-.32,-.12,.38,.06,-.16,-.04)*f0_2+
        mat4(-.13,.20,.42,.37,.25,-.24,-.31,-.46,.39,-.37,.08,-.24,.25,-.09,-.50,-.18)*f0_3+
        vec4(-3.02,-.91,-.64,-1.92))/1.0+f0_3;
    vec4 f2_0=sin(mat4(-.21,.18,-.16,.08,-.46,-.12,-.23,-.11,-.43,.19,-.01,-.23,.31,-.52,-.30,.45)*f1_0+
        mat4(-.72,-.18,-1.03,.36,-.17,.29,-.45,-.47,.61,-.32,-.33,.27,-.34,.36,.48,-.05)*f1_1+
        mat4(-.16,.57,-.13,.14,-.08,-.54,.12,.09,.92,.53,.23,-.09,-.14,-.27,-.62,.03)*f1_2+
        mat4(.47,-.21,.17,.38,-.51,.41,-.34,.17,-.29,.16,.12,-.20,-.07,-.13,.04,.53)*f1_3+
        vec4(-1.38,-2.79,2.66,-3.74))/1.4+f1_0;
    vec4 f2_1=sin(mat4(-.11,.26,-.01,-.45,-.55,-.04,.09,.49,.30,.30,.22,-.72,.44,.40,.08,-.53)*f1_0+
        mat4(.02,-.10,-.54,-.10,.68,-.27,-.43,-.12,.19,-.12,.75,.66,-.59,.21,-.09,.18)*f1_1+
        mat4(.34,-.27,-.58,-.19,-.07,-.13,-.45,-.33,-.63,.51,.41,-.05,-.16,-.66,-.16,-.37)*f1_2+
        mat4(-.27,-.66,.45,.48,.46,.09,-.31,.27,.02,.07,-.20,.13,-.14,-.23,.04,.47)*f1_3+
        vec4(1.03,3.09,3.01,-.54))/1.4+f1_1;
    vec4 f2_2=sin(mat4(-.18,.14,-.35,-.15,-.24,-.17,.19,.45,.56,-.36,-.31,.35,.57,.22,-.29,.29)*f1_0+
        mat4(.22,-.66,-.59,.63,.50,-.20,.28,.16,.07,.38,.20,-.15,-.06,.36,.42,-.19)*f1_1+
        mat4(-.18,.17,-.43,-.27,.12,-.04,.71,-.21,.31,-.33,-.38,-.56,-.61,.16,.07,-.44)*f1_2+
        mat4(.02,-.72,-.32,.43,.49,.34,-.44,-.22,-.27,.41,.05,-.24,.34,.04,-.46,-.30)*f1_3+
        vec4(.88,-2.40,2.08,-.39))/1.4+f1_2;
    vec4 f2_3=sin(mat4(.23,.05,.24,.21,-.41,-.36,-.41,-.40,-.41,-.41,.18,.48,-.13,.32,-.81,-.27)*f1_0+
        mat4(.03,-.35,-.12,-.11,.05,.39,-.63,.15,.56,.43,.42,.01,.42,.51,.58,-.14)*f1_1+
        mat4(.22,.20,.02,.25,.03,-.36,-.54,.07,-.37,-.15,.36,.12,-.19,.36,-.14,-.30)*f1_2+
        mat4(-.10,.35,-.08,-.31,.23,.45,-.00,.22,-.34,.67,-.27,.46,.41,-.13,.53,-.15)*f1_3+
        vec4(-1.07,.98,-1.72,-3.87))/1.4+f1_3;
    vec4 f3_0=sin(mat4(-.79,.28,-.71,-.01,-.34,.16,-.50,-.46,-.26,-.26,.11,.06,-.31,.49,-.68,.19)*f2_0+
        mat4(-.26,-.12,-.33,-.50,-.42,-.26,.25,-.59,.56,-.46,-.33,-.13,.38,-.46,.62,.05)*f2_1+
        mat4(.29,-.63,.21,-.17,.52,-.02,-.12,-.34,.70,-.63,-.00,.17,.06,.21,.56,-.56)*f2_2+
        mat4(.41,.38,-.04,-.71,-.11,.32,-.33,.35,-.13,.31,.29,-.03,.62,.70,.15,-.10)*f2_3+
        vec4(2.34,-3.43,.31,-.63))/1.7+f2_0;
    vec4 f3_1=sin(mat4(-.11,.41,.49,-.12,-.15,.32,-.18,.43,-.56,-.59,.05,.63,.07,.02,.35,-.40)*f2_0+
        mat4(-.44,-.09,-.77,-.07,-.24,-.35,.24,.72,.45,-.38,.88,.23,-.35,.46,-.34,-.37)*f2_1+
        mat4(-.01,.17,-.35,-.39,.15,.43,.08,.16,-.36,.23,-.95,-.04,-.52,.30,.36,-.63)*f2_2+
        mat4(.25,.33,-.20,-.20,-.47,-.52,-.30,.08,.58,-.27,.88,.42,-.41,-.69,.03,-.03)*f2_3+
        vec4(-3.21,-2.81,1.51,3.71))/1.7+f2_1;
    vec4 f3_2=sin(mat4(-.37,-.48,.01,.56,.71,-.54,-.31,-.04,-.14,.08,.25,-.07,.10,.18,.07,.44)*f2_0+
        mat4(-.09,.50,.52,.22,.07,-.81,.44,.59,.13,-.58,-.07,.14,-.18,.17,.08,-.57)*f2_1+
        mat4(-.32,-.14,.01,.42,.46,-.46,-.03,-.05,.16,-.08,-.03,-.19,.51,.15,.45,-.25)*f2_2+
        mat4(.46,-.15,-.66,-.84,.66,.55,-.11,.08,-.61,-.09,-.47,-.33,.48,.12,.16,-.48)*f2_3+
        vec4(.00,1.85,2.49,1.84))/1.7+f2_2;
    vec4 f3_3=sin(mat4(.73,.63,.38,-.02,.03,.06,.57,.23,-.02,.34,.01,-.06,-.47,.09,-.29,.03)*f2_0+
        mat4(.27,.46,-.17,.41,.41,.46,-.31,-.48,-.34,.57,-.29,.04,.06,-.17,.18,-.10)*f2_1+
        mat4(.04,-.11,-.09,-.14,.39,-.05,.49,-.13,.31,.08,.01,-.08,-.17,-.29,-.04,-.08)*f2_2+
        mat4(.01,-.16,-.48,.40,.58,.27,.61,-.44,.20,.54,-.13,-.28,-.23,-.33,.10,.21)*f2_3+
        vec4(-.19,-.90,-3.30,1.34))/1.7+f2_3;
    vec4 f4_0=sin(mat4(-.02,.20,.04,.47,-.12,-.03,.19,.24,-.48,-.50,.14,.34,.87,-.38,.04,-.25)*f3_0+
        mat4(.47,.23,-.56,-.21,.52,.49,-.03,.32,.04,-.15,-.30,.38,.80,-.14,-.38,.33)*f3_1+
        mat4(-.17,-.14,-.18,.12,.87,-.01,.98,-.16,-.32,.35,-.46,-.01,-.67,-.39,.11,-.20)*f3_2+
        mat4(-.44,-.16,.06,.09,-.52,-.66,.03,-.08,.08,.36,.10,.40,-.01,.19,.35,-.85)*f3_3+
        vec4(-2.44,2.45,2.98,2.94))/2.0+f3_0;
    vec4 f4_1=sin(mat4(.34,-.08,.28,.37,-.81,.18,-.61,-.01,.33,-.00,.06,-.17,-.05,.52,.51,-.05)*f3_0+
        mat4(.13,-.44,.46,.04,-.26,-.01,-.36,-.17,-.52,-.22,-.74,-.77,-.02,.32,.37,-.54)*f3_1+
        mat4(-.12,.17,.39,-.23,-.18,-.09,-.48,-.65,-.56,-.51,-.80,-.54,.35,.22,-.47,-.51)*f3_2+
        mat4(-.15,.28,.01,-.93,-.24,-.03,-.99,.13,.03,-.35,-.26,.21,-.41,-.62,.06,1.30)*f3_3+
        vec4(.08,3.81,-1.82,2.38))/2.0+f3_1;
    vec4 f4_2=sin(mat4(.65,-.07,-.56,.15,.84,.34,-.29,-.68,-.86,-.00,-.35,-.06,.37,-.12,-.34,-.03)*f3_0+
        mat4(.37,.25,-.09,.22,-.28,.43,.08,-.03,-.34,-.18,.31,.24,-.05,.51,.06,-.01)*f3_1+
        mat4(.40,-.48,.23,-.17,-.42,.38,-.09,-.38,-.18,-.39,-.47,.08,-.36,-.09,.37,-.31)*f3_2+
        mat4(-.60,.51,-.01,.04,.24,-.15,.12,.11,.37,.38,-.26,-.34,-.23,.69,-.07,.32)*f3_3+
        vec4(3.55,-3.97,-.62,3.45))/2.0+f3_2;
    vec4 f4_3=sin(mat4(-.18,.40,.33,.16,.23,.04,-.37,.47,.54,-.07,-.14,-.19,-.27,-.55,.00,.59)*f3_0+
        mat4(-.11,-.37,-.53,-.48,.22,.11,.12,-.18,.12,-.20,-.19,.37,-.22,-.18,-.86,.55)*f3_1+
        mat4(-.16,.66,.51,-.08,.23,-.17,-.04,.17,-.05,.32,-.38,.23,.11,-.62,.10,-.17)*f3_2+
        mat4(-.15,.51,.17,-.60,.01,-.34,-.38,-.53,.33,-.06,.24,.12,-.47,.42,.18,.28)*f3_3+
        vec4(1.26,1.35,-2.85,-2.52))/2.0+f3_3;
    return dot(f4_0,vec4(-.02,-.05,-.03,.03))+
        dot(f4_1,vec4(.04,-.03,-.03,.01))+
        dot(f4_2,vec4(.01,-.06,-.04,-.05))+
        dot(f4_3,vec4(-.08,-.07,-.05,.04))+
        0.048;


    //// your implementation ends
}

float sdfUnion(float d1, float d2)
{
    return min(d1, d2);
}

/////////////////////////////////////////////////////
//// Step 3: scene sdf
//// You are asked to use the sdf boolean operations to draw the bunny and the cow in the scene.
//// The bunny is located in the ceter of vec3(-1.0, 1., 4.), and the cow is located in the center of vec3(1.0, 1., 4.).
/////////////////////////////////////////////////////

//// sdf: p - query point
float sdf(vec3 p)
{
    float s = 0.;

    float plane_h = -0.1;

    //// calculate the sdf based on all objects in the scene

    //// your implementation starts
    vec3 bunnyPos = vec3(-1.8, 1., 4.);
    vec3 cowPos = vec3(1.5, 1., 4.);

    float bunnysdf = sdfBunny(p - bunnyPos);
    float cowsdf = sdfCow(p - cowPos);
    float planesdf = sdfPlane(p, plane_h);
    
    s = min(planesdf, min(bunnysdf, cowsdf));
    //// your implementation ends

    vec3 duckyPos = vec3(0.0, 1., 4.);
    vec3 teddyPos = vec3(0.0, 1.2, 4.);

    float teddysdf =  sdfTeddy(p - teddyPos);
    float duckysdf = sdfDucky(p - duckyPos);

    s = min(s, min(teddysdf, duckysdf));

    return s;
}

/////////////////////////////////////////////////////
//// ray marching
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
//// Step 4: ray marching
//// You are asked to implement the ray marching algorithm within the following for-loop.
//// You are allowed to reuse your previous implementation in A1a for this function.
/////////////////////////////////////////////////////

//// ray marching: origin - ray origin; dir - ray direction 
float rayMarching(vec3 origin, vec3 dir)
{
    float s = 0.0;

    for(int i = 0; i < 100; i++)
    {
        //// your implementation starts
        vec3 p = origin + s * dir;
        s += sdf(p);
        if (sdf(p) < 0.001 || s > 100.0 ) break;
        //// your implementation ends
    }
    
    return s;
}

/////////////////////////////////////////////////////
//// normal calculation
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
//// Step 5: normal calculation
//// You are asked to calculate the sdf normal based on finite difference.
//// You are allowed to reuse your previous implementation in A1a for this function.
/////////////////////////////////////////////////////

//// normal: p - query point
vec3 normal(vec3 p)
{
    float s = sdf(p);          //// sdf value in p
    float dx = 0.01;           //// step size for finite difference

    //// your implementation starts
    float delta_x = sdf(p + vec3(dx, 0.0, 0.0)) - sdf(p - vec3(dx, 0.0, 0.0));
    float delta_y = sdf(p + vec3(0.0, dx, 0.0)) - sdf(p - vec3(0.0, dx, 0.0));
    float delta_z = sdf(p + vec3(0.0, 0.0, dx)) - sdf(p - vec3(0.0, 0.0, dx));
    return normalize(vec3(delta_x, delta_y, delta_z));
    //// your implementation ends

}

/////////////////////////////////////////////////////
//// Phong shading
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
//// Step 6: lighting and coloring
//// You are asked to specify the color for the two neural SDF objects in the scene.
//// Each object must have a separate color without mixing.
//// Notice that we have implemented the default Phong shading model for you.
/////////////////////////////////////////////////////

vec3 phong_shading(vec3 p, vec3 n)
{
    //// background
    if(p.z > 20.0)
    {
        vec3 color = vec3(0.04, 0.16, 0.33);
        return color;
    }

    //// phong shading
    vec3 lightPos = vec3(4. * sin(iTime), 4., 4. * cos(iTime));
    vec3 l = normalize(lightPos - p);
    float amb = 0.1;
    float dif = max(dot(n, l), 0.) * 0.7;
    vec3 eye = CAM_POS;
    float spec = pow(max(dot(reflect(-l, n), normalize(eye - p)), 0.0), 128.0) * 0.9;

    vec3 sunDir = normalize(vec3(0, 1, -1)); //// parallel light direction
    float sunDif = max(dot(n, sunDir), 0.) * 0.2;

    //// shadow
    float s = rayMarching(p + n * 0.02, l);
    if(s < length(lightPos - p))
        dif *= .2;

    vec3 color = vec3(1.0);

    //// your implementation starts
    /*
    if (p.y < 0.1) {
        color = vec3(0.878, 0.875, 0.537);
    } else {
        if (p.x < 0.) {
            color = vec3(0.961, 0.945, 0);
        } else {
            color = vec3(0.439, 0.322, 0.224);
        }
    }*/
    float epsilon = 0.001;
    vec3 duckyPos = vec3(0.0, 1., 4.);
    vec3 teddyPos = vec3(0.0, 1.2, 4.);
    vec3 bunnyPos = vec3(-1.8, 1., 4.);
    vec3 cowPos = vec3(1.5, 1., 4.);
    if (sdfDucky(p- duckyPos) < epsilon)
    {
        color = vec3(0.961, 0.945, 0);
    } else if (sdfTeddy(p- teddyPos) < epsilon)
    {
        color = vec3(0.439, 0.322, 0.224);
    } else if (sdfBunny(p- bunnyPos) < epsilon)
    {
        color = vec3(1, 0.588, 0.808);
    }
    //// your implementation ends

    return (amb + dif + spec + sunDif) * color;
}

/////////////////////////////////////////////////////
//// main function
/////////////////////////////////////////////////////

void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    vec2 uv = (fragCoord.xy - .5 * iResolution.xy) / iResolution.y;         //// screen uv
    vec3 origin = CAM_POS;                                                  //// camera position 
    vec3 dir = normalize(vec3(uv.x, uv.y, 1));                              //// camera direction
    float s = rayMarching(origin, dir);                                     //// ray marching
    vec3 p = origin + dir * s;                                              //// ray-sdf intersection
    vec3 n = normal(p);                                                     //// sdf normal
    vec3 color = phong_shading(p, n);                                       //// phong shading
    fragColor = vec4(color, 1.);                                            //// fragment color
}

void main()
{
    mainImage(gl_FragColor, gl_FragCoord.xy);
}