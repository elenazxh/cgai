// Signed distance to a bunny contour

// Part of this tutorial code was implemented based on the following shaders:
// SDF visualization (Inigo Quilez): 
// https://www.shadertoy.com/view/3ltSW2
// Neural SDF to ShaderToy conversion (Blackle Mori):
// https://www.shadertoy.com/view/wtVyWK

uniform float iTime;
uniform vec2 iResolution;
uniform vec2 iMouse;

float sdf_circle(vec2 p, vec2 c, float r)
{
    return length(p - c) - r;
}

// reference: https://www.shadertoy.com/view/wtVyWK
float sdfBunny( in vec2 pp, float angle, in vec2 b )
{
    mat2 rot = mat2(cos(-angle), sin(-angle), -sin(-angle), cos(-angle));
    pp = rot * pp;

    vec3 p = vec3(0.0, pp.x, pp.y);
    //// Network weights for Bunny
    vec4 f0_0=sin(p.y*vec4(.96,1.60,-5.24,1.52)+p.z*vec4(-2.98,1.76,3.85,3.39)+p.x*vec4(-1.50,-.19,-3.24,-3.52)+vec4(-1.38,-3.68,2.02,4.13));
    vec4 f0_1=sin(p.y*vec4(-2.83,-.27,-3.22,.91)+p.z*vec4(-1.64,.51,-1.94,4.84)+p.x*vec4(-.89,-.90,.09,-3.05)+vec4(-8.17,7.44,-.58,8.56));
    vec4 f0_2=sin(p.y*vec4(-.34,-3.95,-2.12,.32)+p.z*vec4(.49,2.66,4.05,4.02)+p.x*vec4(3.10,.24,-3.60,.63)+vec4(-1.34,-7.61,-.77,-5.86));
    vec4 f0_3=sin(p.y*vec4(2.23,-1.46,-4.86,-.51)+p.z*vec4(-2.15,2.04,-1.89,.32)+p.x*vec4(3.90,-2.77,-.57,2.97)+vec4(-4.41,-3.66,7.81,3.73));
    vec4 f1_0=sin(mat4(.36,-.05,-.08,.01,.66,-.56,-.11,.17,-.11,-.35,.31,.28,.30,.47,-.18,.19)*f0_0+
        mat4(-.51,-.32,.35,.36,.24,.83,.26,.45,.03,-.15,.16,.18,.27,-.04,-.13,-.30)*f0_1+
        mat4(-.68,.36,-.27,-.55,.36,.24,-.06,-.01,-.35,.30,-.62,.10,-.62,.26,.25,.68)*f0_2+
        mat4(.51,-.13,.40,.09,-.87,-.15,-.62,-.25,-.29,.49,.41,.72,-.18,-.01,.16,-.12)*f0_3+
        vec4(2.59,4.09,-2.22,2.20))/1.0+f0_0;
    vec4 f1_1=sin(mat4(-.95,-.28,-.63,2.33,-.33,.17,.56,-.13,-.63,-.25,.07,.09,.76,-.15,-.49,.43)*f0_0+
        mat4(-.52,.23,-.81,.52,.58,.15,-.31,-.64,.00,.01,.17,-.26,-.34,.39,-.17,-.16)*f0_1+
        mat4(-.33,-.24,-.13,-.43,-.70,-.80,.04,-1.00,-.09,-.14,.21,-.44,.23,-.77,-.12,.49)*f0_2+
        mat4(-.03,-.06,.20,-.43,.52,-.21,.62,-.06,-.67,.27,-.15,.04,-.41,-.34,.29,.22)*f0_3+
        vec4(-.84,1.95,-3.10,-.63))/1.0+f0_1;
    vec4 f1_2=sin(mat4(.99,.82,-.82,.11,-.06,.41,.09,-.16,.08,.04,.16,-.24,.33,-.44,-.12,-.02)*f0_0+
        mat4(.12,-.17,.55,-.64,-.42,.36,.01,-.16,.66,-.22,.68,.21,.49,.71,.11,-.32)*f0_1+
        mat4(-.56,-1.06,-.48,.06,-.31,.10,-.29,-.35,.06,-.35,-.27,-.02,-.02,-.63,-.95,.38)*f0_2+
        mat4(.08,-.38,-.02,-.02,-.26,-1.13,-.06,-.03,.23,.33,.40,.76,-.81,.07,-.36,-.96)*f0_3+
        vec4(-2.30,.12,1.29,-.17))/1.0+f0_2;
    vec4 f1_3=sin(mat4(-.51,-.10,-.86,.09,-.31,.90,-.61,.10,-.26,.03,-.45,-.44,.84,.13,.23,.24)*f0_0+
        mat4(.10,.58,.77,-.48,.43,.36,-.43,.39,-.69,.57,-.06,.46,-.06,.33,-.18,.16)*f0_1+
        mat4(-.18,.31,.29,-.79,-.54,.02,.52,.02,1.04,-.16,-.01,-.48,-.07,.50,.31,.21)*f0_2+
        mat4(-.31,-.20,-.69,-.48,.51,-.68,1.45,-.22,.29,.75,.84,-.59,.04,1.15,-.17,-.41)*f0_3+
        vec4(-3.18,-3.21,-.43,-.71))/1.0+f0_3;
    vec4 f2_0=sin(mat4(-.80,-.35,.44,.88,.75,-.67,-.67,.17,-.28,.56,.63,.85,-.84,.28,.29,-.01)*f1_0+
        mat4(.70,.30,.32,.56,-.16,-.26,-.18,-.25,-.69,.15,.33,.32,-.29,-.77,.03,.28)*f1_1+
        mat4(.60,.12,.31,.44,.45,-.59,.30,-.11,.20,.04,.35,-.01,-.97,-.47,.72,-.31)*f1_2+
        mat4(.63,.44,.78,.19,-.12,-.49,-.34,.57,.25,.22,.05,.10,-.06,.36,.66,-.63)*f1_3+
        vec4(-.87,1.39,-1.47,-.70))/1.4+f1_0;
    vec4 f2_1=sin(mat4(-.22,-1.05,-.44,2.80,-.02,.55,-.12,-.73,-.36,-.39,-.62,.30,-.02,-.05,.24,.07)*f1_0+
        mat4(.07,.61,-.03,-.70,-.12,-.07,-.16,.87,.38,.65,-1.03,.57,1.04,.01,.13,.04)*f1_1+
        mat4(.73,.39,.18,-.28,.34,-.20,-.52,-.70,.03,-.52,-.13,-.52,-.38,-.14,.35,.14)*f1_2+
        mat4(.24,.32,.19,-.10,.48,-.13,-.28,.26,.00,.17,.11,1.19,-.49,-.61,-.06,.15)*f1_3+
        vec4(3.45,.02,-3.00,1.97))/1.4+f1_1;
    vec4 f2_2=sin(mat4(-.40,.61,.46,-.20,.14,-.31,.47,.69,.16,.77,.35,.22,.29,-.76,.05,-.07)*f1_0+
        mat4(-.10,-.28,-.90,-.34,.86,.31,1.04,.48,-.70,-.03,.53,.84,.22,.20,-.37,.40)*f1_1+
        mat4(-.37,.56,-.56,.40,-.36,-.19,.22,-.42,.58,-.69,.18,.36,.49,.61,-.25,-.09)*f1_2+
        mat4(.34,-.06,.57,.29,-.01,-.54,-.88,.14,.00,-.49,.11,.59,-.48,.82,.67,-.39)*f1_3+
        vec4(1.88,3.62,3.15,-2.28))/1.4+f1_2;
    vec4 f2_3=sin(mat4(.72,.31,.38,-.20,.61,1.17,-.64,-.04,-.13,.28,.12,-.08,.06,-.31,.30,-.47)*f1_0+
        mat4(.45,-.02,-1.29,.47,.41,.32,.24,.38,.27,-.26,-1.25,.89,.35,.37,-.62,.18)*f1_1+
        mat4(-.20,-.05,.35,-.08,.26,-.21,.18,.95,-.10,-.27,-.92,-.67,.25,.08,.37,.88)*f1_2+
        mat4(.71,-.85,.85,-.45,.07,-.36,.86,.37,-.22,.02,-.49,.07,-.16,.59,-1.45,.19)*f1_3+
        vec4(3.62,1.33,-3.01,-.69))/1.4+f1_3;
    return dot(f2_0,vec4(.04,-.05,-.05,-.03))+
        dot(f2_1,vec4(-.03,.05,.06,-.02))+
        dot(f2_2,vec4(.06,-.05,-.02,-.06))+
        dot(f2_3,vec4(-.06,-.06,.01,-.04))+
        0.185;
}

void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;
    vec2 c = vec2(0.0, 0.0);
    float r = 0.2;

    // a rotating bunny
    vec2 b = vec2(0.2, 0.3);
    float d = sdfBunny(p, iTime, b);

    // coloring implementation
    vec3 color = vec3(0.0, 0.0, 0.0);
    color = (d > 0.0) ? vec3(0.9, 0.6, 0.3) : vec3(0.65, 0.85, 1.0);
    color *= 1.0 - exp(-6.0 * abs(d));
    color *= 0.8 + 0.2 * sin(100.0 * d);
    color = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 0.01, abs(d)));

    fragColor = vec4(color, 1.0);
}

void main()
{
    mainImage(gl_FragColor, gl_FragCoord.xy);
}